{"version":3,"sources":["components/header.jsx","components/dropdown.jsx","components/searchbar.jsx","components/infobar.jsx","components/schedule.jsx","components/body.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Navbar","Brand","href","Nav","pullRight","NavItem","eventKey","target","DropDown","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","type","typeArray","toConsumableArray","Array","parseInt","size","keys","typeName","capitalizeFirstLetter","string","charAt","toUpperCase","slice","_this2","DropdownButton","id","title","map","item","MenuItem","key","onSelect","onChange","toString","active","Component","SearchBar","state","selected","setState","_ref","group","label","_ref2$","slicedToArray","onGroupChange","onSuburbChange","Row","className","Col","md","mdOffset","FormGroup","InputGroup","lib","options","suburbs","handleSuburbChange","clearButton","highlightOnlyResult","placeholder","Button","dropdown_DropDown","handleGroupChange","onStageChange","stage","InfoBar","headerText","suburb","concat","Label","bsStyle","DAYS","DAYS_AHEAD","Schedule","data","date","Date","startDay","getDay","startDate","getDate","daysAheadNames","i","dayIndex","dateString","getMonth","push","day","_this$props","weekTimes","loadSheddingData","dayTimes","j","sort","Table","responsive","ScheduleTableHead","ScheduleTableBody","getSplitScheduleData","times","index","Day","time","Body","getStage","axios","get","then","response","isNaN","catch","error","console","log","stateKey","value","_this3","defineProperty","Grid","searchbar_SearchBar","getStateChangeHandler","schedule_Schedule","App","body_Body","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04ac835b.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Nav, Navbar, NavItem} from 'react-bootstrap';\r\n\r\nexport default function Header(props) {\r\n  return (\r\n    <Navbar>\r\n      <Navbar.Header>\r\n        <Navbar.Brand>\r\n          <a href=\"/\">Pretoria Load Shedding</a>\r\n        </Navbar.Brand>\r\n      </Navbar.Header>\r\n      <Nav pullRight>\r\n        <NavItem eventKey={1} href=\"http://www.tshwane.gov.za/sites/Departments/Public-works-and-infrastructure/Pages/Load-Shedding.aspx\" target=\"_blank\">\r\n          Official schedule\r\n        </NavItem>\r\n        <NavItem eventKey={1} href=\"http://www.tshwane.gov.za/sites/Departments/Public-works-and-infrastructure/Pages/Load-Shedding.aspx#suburblist\" target=\"_blank\">\r\n          Suburb list\r\n        </NavItem>\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n}","import React, {Component} from 'react';\r\nimport {DropdownButton, MenuItem} from 'react-bootstrap';\r\n\r\nexport default class DropDown extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.type = props.type;\r\n    this.typeArray = [...Array(parseInt(props.size)).keys()];\r\n    this.typeName = this.capitalizeFirstLetter(props.type);\r\n  }\r\n\r\n  capitalizeFirstLetter(string) {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <DropdownButton id={this.type+\"Dropdown\"} title={this.typeName}>\r\n        {this.typeArray.map(item => {\r\n          return (\r\n            <MenuItem\r\n              key={item}\r\n              eventKey={item+1}\r\n              onSelect={(key) => this.props.onChange(key.toString())}\r\n              active={(item+1).toString() === this.props[this.type]}>\r\n                {item+1}\r\n            </MenuItem>\r\n          )\r\n        })}\r\n      </DropdownButton>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport {Col, FormGroup, InputGroup} from 'react-bootstrap';\r\nimport {Typeahead} from 'react-bootstrap-typeahead';\r\n\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\nimport suburbs from '../data/suburb_data';\r\nimport DropDown from './dropdown';\r\nimport Row from 'react-bootstrap/es/Row';\r\n\r\nexport default class SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selected: []\r\n    }\r\n  }\r\n\r\n  handleSuburbChange(selected) {\r\n    this.setState({ selected : selected });\r\n    let [{ group, label }] = selected[0] ? selected : [{group: null, label: null}];\r\n    this.props.onGroupChange(group);\r\n    this.props.onSuburbChange(label);\r\n  }\r\n\r\n  handleGroupChange(group) {\r\n    this.props.onGroupChange(group);\r\n    if (this.state.selected[0] && group !== this.state.selected[0].group){\r\n      this.props.onSuburbChange(null);\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    return (state.selected[0] && state.selected[0].group !== props.group)\r\n      ? { selected: [] }\r\n      : null;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Row className=\"search-bar\">\r\n        <Col md={8} mdOffset={2}>\r\n          <FormGroup>\r\n            <InputGroup>\r\n              <Typeahead\r\n                selected={this.state.selected}\r\n                options={suburbs}\r\n                onChange={selected => this.handleSuburbChange(selected)}\r\n                clearButton={true}\r\n                highlightOnlyResult={true}\r\n                placeholder=\"Enter suburb\"/>\r\n              <InputGroup.Button className=\"input-group-append\">\r\n                <DropDown onChange={group => this.handleGroupChange(group)}\r\n                  group={this.props.group} type=\"group\" size=\"16\"/>\r\n                <DropDown onChange={this.props.onStageChange} stage={this.props.stage} type=\"stage\" size=\"8\"/>\r\n              </InputGroup.Button>\r\n            </InputGroup>\r\n          </FormGroup>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {Col, Label, Row} from 'react-bootstrap';\r\n\r\nexport default function InfoBar(props) {\r\n  let headerText;\r\n  if (props.suburb) {\r\n    headerText = `${props.suburb} (Group ${props.group})`;\r\n  } else if (props.group) {\r\n    headerText = `Group ${props.group}`\r\n  } else {\r\n    headerText = \"Nothing selected\";\r\n  }\r\n\r\n  return (\r\n    <Row className=\"info-bar\">\r\n      <Col className=\"text-center\" md={5} mdOffset={3}>\r\n        <h3>{headerText}</h3>\r\n      </Col>\r\n      <Col md={1}>\r\n        <h3>\r\n          <Label bsStyle={props.stage ? \"warning\" : \"info\"}>Stage: {props.stage ? props.stage : \"None\"}</Label>\r\n        </h3>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}","import React, {Component} from 'react';\r\nimport {Col, Row, Table} from 'react-bootstrap';\r\n\r\nimport data from '../data/data';\r\n\r\nconst DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\nconst DAYS_AHEAD = 5;\r\n\r\nexport default class Schedule extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.data = data;\r\n\r\n    const date = new Date();\r\n    const startDay = date.getDay();\r\n\r\n    this.startDate = date.getDate();\r\n    this.daysAheadNames = [];\r\n\r\n    for (let i = 0; i < DAYS_AHEAD; i++) {\r\n      let dayIndex = (startDay + i)%7;\r\n      let dateString = `${date.getDate() + i}/${date.getMonth()}`;\r\n      this.daysAheadNames.push({day: DAYS[dayIndex], dateString});\r\n    }\r\n  }\r\n\r\n  getSplitScheduleData() {\r\n    let {group, stage} = this.props;\r\n\r\n    let weekTimes = [...Array(DAYS_AHEAD)];\r\n    const loadSheddingData = this.data[group];\r\n\r\n    for (let i = 0; i < DAYS_AHEAD; i++) {\r\n      let dayTimes = [];\r\n      for (let j = parseInt(stage); j > 0; j--) {\r\n        dayTimes.push(loadSheddingData[j][(this.startDate+i).toString()])\r\n      }\r\n\r\n      weekTimes[i] = dayTimes ? dayTimes.sort() : [];\r\n    }\r\n\r\n    return weekTimes;\r\n  }\r\n\r\n  render() {\r\n    if (this.props.group && this.props.stage){\r\n      return (\r\n        <Row className=\"schedule\">\r\n          <Col md={10} mdOffset={1}>\r\n            <Table responsive>\r\n              <ScheduleTableHead daysAheadNames={this.daysAheadNames}/>\r\n              <ScheduleTableBody dayTimes={this.getSplitScheduleData()}/>\r\n            </Table>\r\n          </Col>\r\n        </Row>\r\n      );\r\n    } else {\r\n      return (null);\r\n    }\r\n  }\r\n}\r\n\r\nfunction ScheduleTableHead({daysAheadNames}){\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        {daysAheadNames.map(day => {\r\n          return <th className=\"text-center col-md-1\" key={day.day}>{day.day} {day.dateString}</th>\r\n        })}\r\n      </tr>\r\n    </thead>\r\n  )\r\n}\r\n\r\nfunction ScheduleTableBody(props){\r\n  let {dayTimes} = props;\r\n  return (\r\n    <tbody>\r\n      <tr>\r\n        {dayTimes.map((times, index) => {return <Day key={index} times={times}/>})}\r\n      </tr>\r\n    </tbody>\r\n  )\r\n}\r\n\r\nfunction Day(props){\r\n  let {times} = props;\r\n  return (\r\n    <td className=\"text-center col-md-1\">\r\n      {times.map((time, index) => {\r\n        return <p key={index}>{time}</p>\r\n      })}\r\n    </td>\r\n  );\r\n}","import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport {Grid} from 'react-bootstrap';\r\n\r\nimport SearchBar from './searchbar';\r\nimport InfoBar from './infobar';\r\nimport Schedule from './schedule';\r\nimport './globals.css';\r\n\r\nconst STAGE_URL = 'https://ewn.co.za/assets/loadshedding/api/eskomstatus?';\r\n\r\nexport default class Body extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      stage: null,\r\n      group: null,\r\n      suburb: null\r\n    };\r\n\r\n    this.getStage();\r\n  }\r\n\r\n  getStage() {\r\n    axios.get(STAGE_URL)\r\n      .then(response => {\r\n        const stage = response.data.slice(-1);\r\n        if (!isNaN(stage)){\r\n          this.setState({stage});\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  getStateChangeHandler(stateKey, value) {\r\n    return (value) => this.setState({\r\n      [stateKey]: value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid>\r\n        <SearchBar\r\n          stage={this.state.stage}\r\n          group={this.state.group}\r\n          onStageChange={this.getStateChangeHandler(\"stage\")}\r\n          onGroupChange={this.getStateChangeHandler(\"group\")}\r\n          onSuburbChange={this.getStateChangeHandler(\"suburb\")}/>\r\n        <InfoBar\r\n          stage={this.state.stage}\r\n          group={this.state.group}\r\n          suburb={this.state.suburb}/>\r\n        <Schedule\r\n          stage={this.state.stage}\r\n          group={this.state.group}/>\r\n      </Grid>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nimport './App.css';\r\nimport Header from './components/header';\r\nimport Body from './components/body';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <Body />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}